# Original Author was Kalle@kde.org
# I lifted it in some mater. (Stephan Kulow)
# I used much code from Janos Farkas
 
dnl Process this file with autoconf to produce a configure script.
 
AC_INIT(acinclude.m4) dnl a source file from your sub dir
 
dnl This is so we can use kde-common
AC_CONFIG_AUX_DIR(admin)
 
AC_CANONICAL_SYSTEM
AC_ARG_PROGRAM
 
dnl Automake doc recommends to do this only here. (Janos)
AM_INIT_AUTOMAKE(konqueror-embedded, 0.2) dnl searches for some needed programs
 
KDE_SET_PREFIX
 
dnl generate the config header
AM_CONFIG_HEADER(config.h) dnl at the distribution this done
 
dnl Checks for programs.
AC_CHECK_COMPILERS
AC_ENABLE_SHARED(yes)
AC_ENABLE_STATIC(no)
KDE_PROG_LIBTOOL

AM_KDE_WITH_NLS

UIC_NOT_NEEDED=true

dnl backwards compat with old konq/e
AC_ARG_ENABLE(qt-embedded,[  --enable-qt-embedded    Enable Qt Embedded support (adds -fno-rtti and -DQWS)],
              enable_embedded=$enableval,[])

KDE_USE_QT(2.3)

DCOPIDL2CPP="compiled"
DCOPIDL="compiled"
MCOPIDL="compiled"
ARTSCCONFIG="compiled"
MEINPROC="compiled"
KDECONFIG="compiled"
AC_BASE_PATH_KDE([don't test]) dnl do not require kdelibs

AC_CREATE_KFSSTND(default)
AC_SUBST_KFSSTND

KDE_CREATE_LIBS_ALIASES

AC_ARG_ENABLE(qpe,[  --enable-qpe            Enable support for the Qtopia environment],
              want_qpe=$enableval,want_qpe=no)

if test "x$want_qpe" = "xyes"; then
    AC_PATH_QTOPIA(1.5.0)
    dnl hack
    CXXFLAGS="$CXXFLAGS -D_QT_QPE_"
fi

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/time.h sys/param.h \
        sys/select.h sys/ioctl.h sys/stropts.h stropts.h \
        sys/sockio.h paths.h strings.h string.h sys/stat.h )


dnl Checks for typedefs, structures, and compiler characteristics.
AC_LANG_CPLUSPLUS
AC_HEADER_TIME

dnl check if the compiler has bool
AC_CHECK_BOOL
AC_LANG_C
AC_C_LONG_DOUBLE
AC_TYPE_GETGROUPS

dnl for libsmb
AC_CHECK_SIZEOF(char,1)
AC_CHECK_SIZEOF(short,2)
AC_CHECK_SIZEOF(int,4)
AC_CHECK_SIZEOF(long,4)
AC_C_BIGENDIAN

AC_CHECK_FUNCS(socket unsetenv setenv snprintf vsnprintf mkstemp mkstemps)
AC_CHECK_GETDOMAINNAME
AC_CHECK_GETHOSTNAME
AC_CHECK_USLEEP
AC_CHECK_RANDOM
AC_CHECK_S_ISSOCK
AC_CHECK_KDEMAXPATHLEN
AC_CHECK_SOCKLEN_T

AC_DEFINE_UNQUOTED(KDEDIR, "$prefix", [The prefix to use as fallback])

CXXFLAGS="$CXXFLAGS -DQT_CLEAN_NAMESPACE -DQT_NO_COMPAT -DQT_NO_ASCII_CAST"


AC_ARG_ENABLE(add-ons, [  --enable-add-ons[=DIR1,DIR2,...]
                          configure and build add-ons in DIR1,DIR2,...
                          search for add-ons if no parameter given],
    [case "$enableval" in
	yes) add_ons=""
	    for f in $srcdir/konq-embed/add-ons/*; do
		test -f "$f/konqe_info" && add_ons="$add_ons "`echo $f | sed 's,^.*/,,'`
	    done
	    ;;
	*) add_ons=`echo "$enableval" | sed 's/,/ /g'`
	    ;;
    esac], [add_ons=])
add_ons=`echo "$add_ons" | sed 's,^ ,,; s, $,,'`
ADD_ON_DIRS=$add_ons
AC_SUBST(ADD_ON_DIRS)

add_on_libs=""
add_on_init=""
add_on_dyn_libs=""
add_on_dyn_init=""
for f in $add_ons; do
    i="$srcdir/konq-embed/add-ons/$f/konqe_info"
    if test -f "$i"; then
	v=`awk '$1 == "init:" { for (n=2;n<=NF;n++) printf($n (n == NF ? "" : " ")); printf("\n") }' < $i`
	test -n "$v" && add_on_init="$add_on_init $v"
	v=`awk '$1 == "dyn-init:" { for (n=2;n<=NF;n++) printf($n (n == NF ? "" : " ")); printf("\n") }' < $i`
	test -n "$v" && add_on_dyn_init="$add_on_dyn_init $v"
	v=`awk '$1 == "libs:" { for (n=2;n<=NF;n++) printf($n (n == NF ? "" : " ")); printf("\n") }' < $i`
	for i in $v; do
	    add_on_libs="$add_on_libs \$(top_builddir)/konq-embed/add-ons/$f/$i"
	done
	v=`awk '$1 == "dyn-libs:" { for (n=2;n<=NF;n++) printf($n (n == NF ? "" : " ")); printf("\n") }' < $i`
	for i in $v; do
	    add_on_dyn_libs="$add_on_dyn_libs \$(top_builddir)/konq-embed/add-ons/$f/$i"
	done
    fi
done
LIB_ADDONS=$add_on_libs
AC_SUBST(LIB_ADDONS)
INIT_ADDONS=$add_on_init
AC_SUBST(INIT_ADDONS)
LIB_DYN_ADDONS=$add_on_dyn_libs
AC_SUBST(LIB_DYN_ADDONS)
INIT_DYN_ADDONS=$add_on_dyn_init
AC_SUBST(INIT_DYN_ADDONS)
AM_CONDITIONAL(KONQ_EMBEDDED, true)
AC_DEFINE_UNQUOTED(KONQ_EMBEDDED, 1, [Defined because we are building the embedded version])

require_dlopen=""
export_symbols=""

AC_ARG_ENABLE(selection,[  --disable-selection     Disable text selection],
        want_selection=$enableval, want_selection=yes)
 
if test "x$want_selection" = "xno"; then
  AC_DEFINE_UNQUOTED(KHTML_NO_SELECTION, 1, [Defined if selections in KHTML are disabled])
fi

AC_ARG_ENABLE(scrollbars,[  --disable-scrollbars    Disable scrollbars in KHTML],
        want_scrollbars=$enableval, want_scrollbars=yes)
 
if test "x$want_scrollbars" = "xno"; then
  AC_DEFINE_UNQUOTED(KHTML_NO_SCROLLBARS, 1, [Defined if scrollbars in KHTML are disabled])
fi

AC_ARG_ENABLE(javascript,[  --disable-javascript    Disable JavaScript support],
              want_javascript=$enableval,want_javascript=yes)

if test "x$want_javascript" = "xyes"; then
    javascript_mode=static
else
    javascript_mode=none
    KJS_SUBDIR=""
    ECMA_SUBDIR=""
    LIB_KJSHTML=""
fi

AC_ARG_WITH(javascript,[  --with-javascript=mode  where mode is one of static/dynamic/none],
            javascript_mode=$withval,
	    javascript_mode=static)
 
AM_CONDITIONAL(DLOPEN_JAVASCRIPT, test "x$javascript_mode" = "xdynamic")

KJS_SUBDIR="kjs"
ECMA_SUBDIR="ecma"
LIB_KHTML="\$(top_builddir)/konq-embed/kdesrc/khtml/libkhtml_i.la"
 
if test "x$javascript_mode" = "xnone"; then
    KJS_SUBDIR=""
    ECMA_SUBDIR=""
    LIB_KJSHTML=""
else
   AC_DEFINE_UNQUOTED(ENABLE_JAVASCRIPT, 1, [Defined if JavaScript support is enabled])

   if test "x$javascript_mode" = "xstatic"; then
       LIB_KJSHTML="\$(top_builddir)/konq-embed/kdesrc/khtml/ecma/libkjs_html_i.la"
       LIB_KJSHTML="$LIB_KJSHTML \$(top_builddir)/konq-embed/kdesrc/kjs/libkjs.la"
       LIB_KJSHTML="$LIB_KJSHTML \$(LIBPCRE)"
   else
       require_dlopen="yes"
       export_symbols="yes"
       LIB_KJSHTML=""
       LIB_KHTML="\$(top_builddir)/konq-embed/kdesrc/khtml/libkhtml.la"
       AC_DEFINE_UNQUOTED(DLOPEN_JAVASCRIPT, 1, [Defined if JavaScript should be dynamically opened at run-time])
   fi
fi

AC_SUBST(KJS_SUBDIR)
AC_SUBST(ECMA_SUBDIR)
AC_SUBST(LIB_KJSHTML)
AC_SUBST(LIB_KHTML)
 
AC_ARG_ENABLE(kjsmemdebug,[  --enable-kjsmemdebug    Enable KJS memory debugging],
        want_kjsmemdebug=$enableval, want_kjsmemdebug=no)
 
if test "x$want_kjsmemdebug" = "xyes"; then
  AC_DEFINE_UNQUOTED(KJS_DEBUG_MEM, 1, [Defined if we debug the KJS memory (de)allocations])
  kjs_debug_mem="-DKJS_DEBUG_MEM"
else
  kjs_debug_mem=""
fi
AC_SUBST(kjs_debug_mem)

dnl ### hack for kssl Makefile.am
LIB_KDEUI=""
AC_SUBST(LIB_KDEUI)
kde_icondir='${prefix}/pics'
AC_SUBST(kde_icondir)
kde_appsdir='${prefix}/apps'
AC_SUBST(kde_appsdir)

AC_ARG_ENABLE(dynamic-ssl,[  --enable-dynamic-ssl    dlopen the SSL libraries at run-time (default: yes)],
        want_dynamicssl=$enableval, want_dynamicssl=yes)
 
if test "x$want_dynamicssl" = "xyes"; then
    require_dlopen="yes"
    AC_DEFINE_UNQUOTED(KONQ_DYNAMIC_SSL, 1, [dlopen the SSL libraries at run-time])
    KONQ_LIBSSL=""
    KONQ_SSL_LDFLAGS=""
    KONQ_LIBDL="\$(LIBDL)"
else
    KONQ_LIBSSL="\$(LIBSSL)"
    KONQ_SSL_LDFLAGS="\$(SSL_LDFLAGS)"
    KONQ_LIBDL=""
fi

AC_SUBST(KONQ_LIBSSL)
AC_SUBST(KONQ_SSL_LDFLAGS)
AC_SUBST(KONQ_LIBDL)

AC_ARG_ENABLE(dlopen-addons,[  --enable-dlopen-addons  allow loading dynamic add-ons (default: no)],
        want_dlopen_addons=$enableval, want_dlopen_addons=no)
 
if test "x$want_dlopen_addons" = "xyes"; then
    require_dlopen="yes"
    export_symbols="yes"
    AC_DEFINE_UNQUOTED(DYNAMIC_ADD_ONS, 1, [Defined if dynamic add-ons are enabled])
fi
AM_CONDITIONAL(DYNAMIC_ADD_ONS, test "x$want_dlopen_addons" = "xyes")
AM_CONDITIONAL(STATIC_ADD_ONS, test "x$want_dlopen_addons" != "xyes")

if test "x$export_symbols" = "xyes"; then
    AC_DEFINE_UNQUOTED(EXPORT_SYMBOLS, 1, [Defined if the executable exports its symbols])
fi
AM_CONDITIONAL(EXPORT_SYMBOLS, test "x$export_symbols" = "xyes")

KDE_CHECK_DLOPEN(ac_konq_have_dlopen=no, ac_konq_have_dlopen=yes)

if test "x$ac_konq_have_dlopen" = "xno" && test "x$require_dlopen" = "xyes"; then
    AC_MSG_ERROR([dlopen requested but no dlopen support found on this system.])
fi

AC_ARG_ENABLE(readwrite,[  --enable-readwrite      Enable support for Read/Write KParts],
              want_readwrite=$enableval,want_readwrite=no)
if test "x$want_readwrite" = "xyes"; then
    AC_DEFINE(ENABLE_READWRITE, 1, [Defined if we support KParts::ReadWritePart])
fi
AM_CONDITIONAL(ENABLE_READWRITE, test "x$want_readwrite" = "xyes")

AC_ARG_ENABLE(printing,[  --enable-printing       Enable printing support],
              want_printing=$enableval,want_printing=no)
if test "x$want_printing" = "xyes"; then
    AC_DEFINE(ENABLE_PRINTING, 1, [Defined if we want printing support])
fi
AM_CONDITIONAL(ENABLE_PRINTING, test "x$want_printing" = "xyes")
AC_ARG_ENABLE(ftp,[  --enable-ftp            Enable support for the FTP protocol],
              want_ftp=$enableval,want_ftp=no)
if test "x$want_ftp" = "xyes"; then
    AC_DEFINE(ENABLE_FTP, 1, [If we want support for the FTP protocol])
    KIO_FTP="libkio_ftp.la"
    AC_SUBST(KIO_FTP)
fi

AC_ARG_ENABLE(cgi,[  --enable-cgi            Enable support for CGI implemented protocols],
              want_cgi=$enableval,want_cgi=no)
if test "x$want_cgi" = "xyes"; then
    AC_DEFINE(ENABLE_CGI, 1, [If we support protocols trough local CGI])
fi

AC_ARG_ENABLE(sortdir,[  --enable-sortdir        Enable sorting directory listings],
              want_sortdir=$enableval,want_sortdir=no)
if test "x$want_sortdir" = "xyes"; then
    AC_DEFINE(SORT_DIRLIST, 1, [If we support sorting directory listings])
fi
dnl ------------------------------------------------------------------------
dnl Try to find the SSL headers and libraries.
dnl $(SSL_LDFLAGS) will be -Lsslliblocation (if needed)
dnl and $(SSL_INCLUDES) will be -Isslhdrlocation (if needed)
dnl ------------------------------------------------------------------------
dnl
AC_DEFUN(AC_PATH_SSL,
[
LIBSSL="-lssl -lcrypto"
AC_MSG_CHECKING([for OpenSSL])

ac_ssl_includes=NO ac_ssl_libraries=NO
ssl_libraries=""
ssl_includes=""
AC_ARG_WITH(ssl-dir,
    [  --with-ssl-dir=DIR      where the root of OpenSSL is installed],
    [  ac_ssl_includes="$withval"/include
       ac_ssl_libraries="$withval"/lib
    ])

want_ssl=yes
AC_ARG_WITH(ssl,
    [  --without-ssl           Disable SSL checks],
    [want_ssl=$withval])

if test $want_ssl = yes; then

AC_CACHE_VAL(ac_cv_have_ssl,
[#try to guess OpenSSL locations

  ssl_incdirs="/usr/include /usr/local/include /usr/ssl/include /usr/local/ssl/include $prefix/include $kde_extra_includes"
  ssl_incdirs="$ac_ssl_includes $ssl_incdirs"
  AC_FIND_FILE(openssl/ssl.h, $ssl_incdirs, ssl_incdir)
  ac_ssl_includes="$ssl_incdir"

  ssl_libdirs="/usr/lib /usr/local/lib /usr/ssl/lib /usr/local/ssl/lib $prefix/lib $exec_prefix/lib $kde_extra_libs"
  if test ! "$ac_ssl_libraries" = "NO"; then
    ssl_libdirs="$ac_ssl_libraries $ssl_libdirs"
  fi

  test=NONE
  ssl_libdir=NONE
  for dir in $ssl_libdirs; do
    try="ls -1 $dir/libssl*"
    if test=`eval $try 2> /dev/null`; then ssl_libdir=$dir; break; else echo "tried $dir" >&AC_FD_CC ; fi
  done

  ac_ssl_libraries="$ssl_libdir"

  AC_LANG_SAVE
  AC_LANG_C

  ac_cflags_safe="$CFLAGS"
  ac_ldflags_safe="$LDFLAGS"
  ac_libs_safe="$LIBS"

  CFLAGS="$CFLAGS -I$ssl_incdir $all_includes"
  LDFLAGS="-L$ssl_libdir $all_libraries"
  LIBS="$LIBS $LIBSSL -lRSAglue -lrsaref"

  AC_TRY_LINK(,void RSAPrivateEncrypt(void);RSAPrivateEncrypt();,
  ac_ssl_rsaref="yes"
  ,
  ac_ssl_rsaref="no"
  )

  CFLAGS="$ac_cflags_safe"
  LDFLAGS="$ac_ldflags_safe"
  LIBS="$ac_libs_safe"

  AC_LANG_RESTORE

  if test "$ac_ssl_includes" = NO || test "$ac_ssl_libraries" = NO; then
    have_ssl=no
  else
    have_ssl=yes;
  fi

  ])

  eval "$ac_cv_have_ssl"
else
  have_ssl=no
fi

if test "$have_ssl" = yes; then
  dnl Check for SSL version

  fixed_ssl_version="no"
  AC_ARG_WITH(ssl-version, [  --with-ssl-version=ver  Disable ssl version check
                          and assume specified version],
              [fixed_ssl_version=$withval])

  if test "$fixed_ssl_version" != "no"; then
      have_ssl=yes
      ac_cv_ssl_version="ssl_version=$fixed_ssl_version"
  else
  AC_CACHE_VAL(ac_cv_ssl_version,
  [
    AC_LANG_SAVE
    AC_LANG_C 

    cat >conftest.$ac_ext <<EOF
#include <openssl/opensslv.h>
#include <stdio.h>
    int main() {
 
#ifndef OPENSSL_VERSION_NUMBER
      printf("ssl_version=\\"error\\"\n");
#else
      if (OPENSSL_VERSION_NUMBER < 0x00906000)
        printf("ssl_version=\\"old\\"\n");
      else
        printf("ssl_version=\\"ok\\"\n");
#endif
     return (0);
    }
EOF

    ac_compile='${CC-gcc} $CFLAGS -I$ac_ssl_includes conftest.$ac_ext -o conftest'
    if AC_TRY_EVAL(ac_compile); then 

      if eval `./conftest 2>&5`; then
        if test $ssl_version = error; then
          AC_MSG_ERROR([$ssl_incdir/openssl/opensslv.h doesn't define OPENSSL_VERSION_NUMBER !])
        else
          if test $ssl_version = old; then
            AC_MSG_WARN([OpenSSL version too old. Upgrade to 0.9.6 at least, see http://www.openssl.org. SSL support disabled.])
            have_ssl=no
          fi
        fi
        ac_cv_ssl_version="ssl_version=$ssl_version"
      else
        AC_MSG_ERROR([Your system couldn't run a small SSL test program.
        Check config.log, and if you can't figure it out, send a mail to 
        David Faure <faure@kde.org>, attaching your config.log])
      fi

    else
      AC_MSG_ERROR([Your system couldn't link a small SSL test program.
      Check config.log, and if you can't figure it out, send a mail to 
      David Faure <faure@kde.org>, attaching your config.log])
    fi 

    AC_LANG_RESTORE

  ])
  fi

  eval "$ac_cv_ssl_version"
fi

if test "$have_ssl" != yes; then
  LIBSSL="";
  AC_MSG_RESULT([$have_ssl]);
else
  AC_DEFINE(HAVE_SSL, 1, [If we are going to use OpenSSL])
  ac_cv_have_ssl="have_ssl=yes \
    ac_ssl_includes=$ac_ssl_includes ac_ssl_libraries=$ac_ssl_libraries ac_ssl_rsaref=$ac_ssl_rsaref"
  AC_MSG_RESULT([libraries $ac_ssl_libraries, headers $ac_ssl_includes])
  
  ssl_libraries="$ac_ssl_libraries"
  ssl_includes="$ac_ssl_includes"

  AC_MSG_CHECKING([whether OpenSSL uses rsaref])
  AC_MSG_RESULT($ac_ssl_rsaref)
  if test "$ac_ssl_rsaref" = yes; then
    LIBSSL="-lssl -lcrypto -lRSAglue -lrsaref" 
  fi

  AC_MSG_CHECKING([for OpenSSL version])
  AC_MSG_RESULT($ssl_version)
  if test $ssl_version = "0.9.5"; then
    AC_DEFINE(HAVE_OLD_SSL_API, 1, [Define if you have OpenSSL < 0.9.6])
  fi
fi

if test "$ssl_includes" = "/usr/include" || test  "$ssl_includes" = "/usr/local/include" || test -z "$ssl_includes"; then
 SSL_INCLUDES="";
else
 SSL_INCLUDES="-I$ssl_includes"
fi

if test "$ssl_libraries" = "/usr/lib" || test "$ssl_libraries" = "/usr/local/lib" || test -z "$ssl_libraries"; then
 SSL_LDFLAGS=""
else
 SSL_LDFLAGS="-L$ssl_libraries"
fi

AC_SUBST(SSL_INCLUDES)
AC_SUBST(SSL_LDFLAGS)
AC_SUBST(LIBSSL)
])


AC_PATH_SSL

dnl AC_OUTPUT(konq-embed/ipkg/konq-embedrc)
dnl AC_OUTPUT(konq-embed/ipkg/preinst)

konq_tmp_prefix=/tmp
AC_ARG_WITH(konq-tmp-prefix,
[  --with-konq-tmp-prefix=DIR   directory to use as disk-cache on iPAQ],
[konq_tmp_prefix=$withval])

AC_SUBST(konq_tmp_prefix)


dnl --------
dnl KSocketAddress/KExtendedSocket extra configuration
dnl --------
dnl
dnl This is to be merged with toplevel configure.in.in soon

AC_CHECK_FUNCS(inet_ntop inet_pton getpeername getsockname getsockopt gethostbyname2_r gethostbyname_r gethostbyname2)

AC_SUBST(HAVE_GETADDRINFO)
AC_SUBST(GETADDRINFO_RETURNS_UNIX)
AC_SUBST(HAVE_BROKEN_GETADDRINFO)
AC_SUBST(HAVE_STRUCT_ADDRINFO)
AC_MSG_CHECKING([for struct addrinfo])
AC_TRY_COMPILE(dnl
      [
        #include <netdb.h>
      ],
      [
        struct addrinfo ai;
      ],
      [
        AC_DEFINE(HAVE_STRUCT_ADDRINFO, 1, [Define if netdb.h defines struct addrinfo])
	AC_MSG_RESULT(yes)
      ],
      AC_MSG_RESULT(no)
)
my_LIBS="$LIBS"
LIBS="$LIBS $LIBSOCKET"
AC_CHECK_FUNC(getaddrinfo,
  [
    AC_DEFINE(HAVE_GETADDRINFO, 1, [Define if getaddrinfo is present])

    dnl Even though we now know that getaddrinfo is there, make sure getnameinfo is there too
    kde_gai_ok=true
    AC_CHECK_FUNCS(freeaddrinfo getnameinfo gai_strerror, : , 
    [
      kde_gai_ok=false
      AC_DEFINE(HAVE_BROKEN_GETADDRINFO, 1, [Define if getaddrinfo is broken and should be replaced])
      AC_DEFINE(GETADDRINFO_RETURNS_UNIX, 1, [Define if getaddrinfo returns AF_UNIX sockets])
      break
    ])

    if $kde_gai_ok ; then
      AC_MSG_CHECKING([if getaddrinfo returns AF_UNIX])
      dnl At least one system has a bad implementation of getaddrinfo
      dnl FreeBSD's libc getaddrinfo code has AF_UNIX disabled
      dnl This is rather stupid, but since it's there...
      AC_TRY_RUN(dnl
      [
        #include <sys/types.h>
	#include <sys/socket.h>
        #include <netdb.h>
	int main()
	{
	  struct addrinfo hint, *res;
	  int err;
	  hint.ai_family = AF_UNSPEC;
	  hint.ai_protocol = 0;
	  hint.ai_socktype = SOCK_STREAM;
	  hint.ai_flags = 0;
	  err = getaddrinfo(0, "/tmp/conftest-sock", &hint, &res);
	  if (err != 0 || res == 0 || res->ai_family != AF_UNIX)
	    return 1;
	  return 0;
	}
      ],
      [
        AC_MSG_RESULT(yes)
	AC_DEFINE(GETADDRINFO_RETURNS_UNIX, 1, [Define if getaddrinfo returns AF_UNIX sockets])
      ],
      [
        AC_MSG_RESULT(no)
      ],
      [
        case "$target" in
	  *-*-freebsd*)
	    AC_MSG_RESULT(assuming it doesn't)
	    ;;
	  *)
	    AC_MSG_RESULT(assuming it does)
	    AC_DEFINE(GETADDRINFO_RETURNS_UNIX, 1, [Define if getaddrinfo returns AF_UNIX sockets])
	    ;;
	esac
      ]
      )
    fi		# test $kde_gai_broken
  ],
  [
    dnl Our getaddrinfo returns AF_UNIX sockets
    AC_DEFINE(GETADDRINFO_RETURNS_UNIX, 1, [Define if getaddrinfo returns AF_UNIX sockets])
  ]
)
LIBS="$my_LIBS"

AC_SUBST(HAVE_SOCKADDR_SA_LEN)
AC_MSG_CHECKING([if struct sockaddr has member sa_len])
AC_TRY_COMPILE(
  [
    #include <sys/types.h>
    #include <sys/socket.h>
  ],
  [
    struct sockaddr sa;
    sa.sa_len = sizeof(sa);
  ],
  [
    AC_DEFINE(HAVE_SOCKADDR_SA_LEN,1,[Define if struct sockaddr has member sa_len])
    AC_MSG_RESULT(yes)
  ],
  AC_MSG_RESULT(no)
)

AC_SUBST(HAVE_SOCKADDR_IN6)
AC_SUBST(HAVE_SOCKADDR_IN6_SCOPE_ID)
AC_CHECK_HEADERS(netinet/in.h,
  [

    dnl Check for sockaddr_in6. We don't have to check for in6_addr
    dnl if sockaddr_in6 is there, so is in6_addr
    AC_MSG_CHECKING([for struct sockaddr_in6])
    AC_TRY_COMPILE(
      [
	#include <sys/types.h>
	#include <stdlib.h>
	#include <netinet/in.h>
      ],
      [
	struct sockaddr_in6 sin6;
      ],
      [
	AC_DEFINE(HAVE_SOCKADDR_IN6,1,[Define if we have struct sockaddr_in6 in netinet/in.h])
	AC_MSG_RESULT(yes)

	dnl Check if this system's sockaddr_in6 already supports sin6_scope_id
	dnl All systems should support it, but some still don't
	AC_MSG_CHECKING([if struct sockaddr_in6 has member sin6_scope_id])
	AC_TRY_COMPILE(
	  [
	    #include <sys/types.h>
	    #include <stdlib.h>
	    #include <netinet/in.h>
	  ],
	  [
	    struct sockaddr_in6 sin6;
	    sin6.sin6_scope_id = 0;
	  ],
	  [
	    AC_DEFINE(HAVE_SOCKADDR_IN6_SCOPE_ID,1,[Define if this system already has sin6_scope_id in sockaddr_in6])
	    AC_MSG_RESULT(yes)
	  ],
	  AC_MSG_RESULT(no)
	)
      ],
      AC_MSG_RESULT(no)
    )
  ]
)

AC_SUBST(KDE_IPV6_LOOKUP_MODE)
AC_ARG_WITH(ipv6-lookup, 
[  --with-ipv6-lookup=mode Set the mode for IPv6 lookups: yes, auto and no],
[
  AC_MSG_CHECKING([how we should treat IPv6 lookups])
  if test "$withval" = yes -o "$withval" = always; then
    AC_DEFINE(KDE_IPV6_LOOKUP_MODE, 0, [Lookup mode for IPv6 addresses: 0 for always, 1 for check and 2 for disabled])
    AC_MSG_RESULT([always do the lookup])
  elif test "$withval" = auto; then
    AC_DEFINE(KDE_IPV6_LOOKUP_MODE, 1, [Lookup mode for IPv6 addresses: 0 for always, 1 for check and 2 for disabled])
    AC_MSG_RESULT([check for IPv6 stack])
  else
    AC_DEFINE(KDE_IPV6_LOOKUP_MODE, 2, [Lookup mode for IPv6 addresses: 0 for always, 1 for check and 2 for disabled])
    AC_MSG_RESULT([never do the lookup])
  fi
], [    
  AC_DEFINE(KDE_IPV6_LOOKUP_MODE, 0, [Lookup mode for IPv6 addresses: 0 for always, 1 for check and 2 for disabled])
])
  

dnl KDE JavaScript specific configure tests

AC_CHECK_HEADERS(ieeefp.h float.h)
AC_CHECK_LIB(m, isinf, [
  AC_DEFINE_UNQUOTED(HAVE_FUNC_ISINF, 1, [Define if you have isinf])
])
AC_CHECK_LIB(m, finite, [
  AC_DEFINE_UNQUOTED(HAVE_FUNC_FINITE, 1, [Define if you have finite])
])
AC_CHECK_LIB(m, _finite, [
  AC_DEFINE_UNQUOTED(HAVE_FUNC__FINITE, 1, [Define if you have _finite])
])
AC_CHECK_LIB(m, isnan, [
  AC_DEFINE_UNQUOTED(HAVE_FUNC_ISNAN, 1, [Define if you have isnan])
])

AC_DEFUN(AC_CHECK_PCREPOSIX,
[
  AC_MSG_CHECKING([for pcreposix])
  AC_CACHE_VAL(ac_cv_have_pcreposix,
  [
    ac_save_libs="$LIBS"
    KDE_FIND_PATH(pcre-config, PCRE_CONFIG, [${prefix}/bin /usr/local/bin /opt/local/bin], [PCRE_CONFIG="" ])
    if test -n "$PCRE_CONFIG" && $PCRE_CONFIG --libs >/dev/null 2>&1; then
        LIBS=`$PCRE_CONFIG --libs --libs-posix`
        CPPFLAGS="$CPPFLAGS `$PCRE_CONFIG --cflags`"
    else
        LIBS="-lpcre -lpcreposix"
    fi
    ac_CPPFLAGS_save="$CPPFLAGS"
    CPPFLAGS="$CPPFLAGS $all_includes"
    ac_LDFLAGS_save="$LDFLAGS"
    LDFLAGS="$LDFLAGS $all_libraries"
    AC_TRY_LINK(
      [#include <pcreposix.h>],
      [regfree(0);],
      [ac_cv_have_pcreposix="yes"],
      [ac_cv_have_pcreposix="no"]
    )
    LIBS="$ac_save_libs"
    LDFLAGS="$ac_LDFLAGS_save"
    CPPFLAGS="$ac_CPPFLAGS_save"
  ])
  AC_MSG_RESULT($ac_cv_have_pcreposix)
  if test "$ac_cv_have_pcreposix" = "yes"; then
    LIBPCRE="-lpcre -lpcreposix"
    AC_DEFINE(HAVE_PCREPOSIX, 1, [Define if you have pcreposix libraries and header files.])
  fi
])
AC_CHECK_PCREPOSIX
AC_SUBST(LIBPCRE)
dnl AC_OUTPUT(konq-embed/src/actions/konqe.rc)
AC_MSG_CHECKING([for which gui to use])
 
ac_konqe_gui="x11"
 
if test -n "$LIB_QTOPIA"; then
    ac_konqe_gui="qpe";
fi
 
AC_ARG_WITH(gui,[  --with-gui=TYPE         where TYPE can be of x11, qpe or kiosk. default is x11],
            [ ac_konqe_gui="$withval" ])
 
 
if test -z "$LIB_QTOPIA" && test "x$ac_konqe_gui" = "xqpe"; then
    AC_MSG_RESULT([qpe gui requested but no Qtopia found, falling back to x11]);
else
    AC_MSG_RESULT([$ac_konqe_gui])
fi
 
case $ac_konqe_gui in
        x11)
                AC_DEFINE_UNQUOTED(KONQ_GUI_X11, 1, [use x11 gui])
                ;;
        qpe)
                AC_DEFINE_UNQUOTED(KONQ_GUI_QPE, 1, [use qpe gui])
                ;;
        kiosk)
                AC_DEFINE_UNQUOTED(KONQ_GUI_KIOSK, 1, [use kiosk gui])
                ;;
        *)
                AC_MSG_ERROR([Unknown GUI type '$1' specified.])
                ;;
esac

AC_ARG_ENABLE(bookmarks,[  --disable-bookmarks     Disable XBel bookmark support],
              want_bookmarks=$enableval,want_bookmarks=yes)
 
if test "x$want_bookmarks" = "xyes"; then
    AC_DEFINE_UNQUOTED(ENABLE_BOOKMARKS, 1, [Defined if bookmark support is enabled])
fi

AC_ARG_ENABLE(sidebar,[  --enable-sidebar        Enable sidebar support],
              want_sidebar=$enableval,want_sidebar=no)
if test "x$want_sidebar" = "xyes"; then
    AC_DEFINE_UNQUOTED(ENABLE_SIDEBAR, 1, [Defined if local sidebar support is enabled])
fi

AC_ARG_ENABLE(xmlui,[  --enable-xmlui          Enable XML user interface],
              want_xmlui=$enableval,want_xmlui=no)
AM_CONDITIONAL(XMLUI, test "x$want_xmlui" = "xyes")
if test "x$want_xmlui" = "xyes"; then
    AC_DEFINE_UNQUOTED(ENABLE_XMLUI, 1, [Defined if user interface comes from a XML file])
fi

AC_ARG_ENABLE(cmdoptions,[  --disable-cmdoptions    Disable command line options],
              want_cmdoptions=$enableval,want_cmdoptions=yes)
if test "x$want_cmdoptions" = "xyes"; then
    AC_DEFINE_UNQUOTED(PARSE_CMDLINE, 1, [Defined if command line options are parsed])
fi

AC_ARG_ENABLE(fontsubs,[  --enable-fontsubs       Enable font substitution],
              want_fontsubs=$enableval,want_fontsubs=no)
if test "x$want_fontsubs" = "xyes"; then
    AC_DEFINE_UNQUOTED(ENABLE_FONTSUBS, 1, [Defined if font substitution is enabled])
fi

AC_ARG_ENABLE(largeicons,[  --enable-largeicons     Use large icons in toolbar],
              want_largeicons=$enableval,want_largeicons=no)
AM_CONDITIONAL(LARGEICONS, test "x$want_largeicons" = "xyes")
if test "x$want_largeicons" = "xyes"; then
    AC_DEFINE_UNQUOTED(USE_LARGE_ICONS, 1, [Defined if large icons are used in toolbar])
    konq_largeicons=big/
else
    konq_largeicons=
fi
AC_SUBST(konq_largeicons)

AC_ARG_ENABLE(jshostext,[  --enable-jshostext      Allow for JavaScript extensions],
              want_jshostext=$enableval,want_jshostext=no)
AM_CONDITIONAL(JS_HOSTEXTEND, test "x$want_jshostext" = "xyes")
if test "x$want_jshostext" = "xyes"; then
    AC_DEFINE_UNQUOTED(ENABLE_JS_HOSTEXTEND, 1, [Defined if JavaScript can be extended])
fi
KDE_CREATE_SUBDIRSLIST
AM_CONDITIONAL(konq_embed_SUBDIR_included, test "x$konq_embed_SUBDIR_included" = xyes)
AC_CONFIG_FILES([ Makefile ])
AC_CONFIG_FILES([ konq-embed/Makefile ])
AC_CONFIG_FILES([ konq-embed/add-ons/Makefile ])
AC_CONFIG_FILES([ konq-embed/add-ons/jsdebug/Makefile ])
AC_CONFIG_FILES([ konq-embed/add-ons/kflashpart/Makefile ])
AC_CONFIG_FILES([ konq-embed/add-ons/kflashpart/flashlib/Makefile ])
AC_CONFIG_FILES([ konq-embed/add-ons/kplaintext/Makefile ])
AC_CONFIG_FILES([ konq-embed/add-ons/ksimplesound/Makefile ])
AC_CONFIG_FILES([ konq-embed/add-ons/pppdialer/Makefile ])
AC_CONFIG_FILES([ konq-embed/add-ons/pppdialer/pics/Makefile ])
AC_CONFIG_FILES([ konq-embed/add-ons/pppdialer/pics/big/Makefile ])
AC_CONFIG_FILES([ konq-embed/dropin/Makefile ])
AC_CONFIG_FILES([ konq-embed/dropin/khtml/Makefile ])
AC_CONFIG_FILES([ konq-embed/dropin/kio/Makefile ])
AC_CONFIG_FILES([ konq-embed/dropin/kio/kded/Makefile ])
AC_CONFIG_FILES([ konq-embed/dropin/kparts/Makefile ])
AC_CONFIG_FILES([ konq-embed/dropin/kssl/Makefile ])
AC_CONFIG_FILES([ konq-embed/ipkg/Makefile ])
AC_CONFIG_FILES([ konq-embed/kdesrc/Makefile ])
AC_CONFIG_FILES([ konq-embed/kdesrc/kdecore/Makefile ])
AC_CONFIG_FILES([ konq-embed/kdesrc/khtml/Makefile ])
AC_CONFIG_FILES([ konq-embed/kdesrc/khtml/css/Makefile ])
AC_CONFIG_FILES([ konq-embed/kdesrc/khtml/dom/Makefile ])
AC_CONFIG_FILES([ konq-embed/kdesrc/khtml/ecma/Makefile ])
AC_CONFIG_FILES([ konq-embed/kdesrc/khtml/html/Makefile ])
AC_CONFIG_FILES([ konq-embed/kdesrc/khtml/misc/Makefile ])
AC_CONFIG_FILES([ konq-embed/kdesrc/khtml/rendering/Makefile ])
AC_CONFIG_FILES([ konq-embed/kdesrc/khtml/xml/Makefile ])
AC_CONFIG_FILES([ konq-embed/kdesrc/kio/Makefile ])
AC_CONFIG_FILES([ konq-embed/kdesrc/kio/http/Makefile ])
AC_CONFIG_FILES([ konq-embed/kdesrc/kio/http/kcookiejar/Makefile ])
AC_CONFIG_FILES([ konq-embed/kdesrc/kjs/Makefile ])
AC_CONFIG_FILES([ konq-embed/kdesrc/kparts/Makefile ])
AC_CONFIG_FILES([ konq-embed/kdesrc/kssl/Makefile ])
AC_CONFIG_FILES([ konq-embed/kdesrc/kssl/kssl/Makefile ])
AC_CONFIG_FILES([ konq-embed/kdesrc/kssl/kssl/caroot/Makefile ])
AC_CONFIG_FILES([ konq-embed/kdesrc/kssl/kssl/caroot/expired/Makefile ])
AC_CONFIG_FILES([ konq-embed/src/Makefile ])
AC_CONFIG_FILES([ konq-embed/src/actions/Makefile ])
AC_CONFIG_FILES([ konq-embed/src/actions/big/Makefile ])
AC_CONFIG_FILES([ konq-embed/tools/Makefile ])
AC_CONFIG_FILES([ konq-embed/ipkg/konq-embedrc ])
AC_CONFIG_FILES([ konq-embed/ipkg/preinst ])
AC_CONFIG_FILES([ konq-embed/src/actions/konqe.rc ])
AC_OUTPUT
if test "$all_tests" = "bad"; then
  if test ! "$cache_file" = "/dev/null"; then
    echo ""    
    echo "Please remove the file $cache_file after changing your setup"
    echo "so that configure will find the changes next time."
    echo ""
  fi
else
  echo ""
  echo "Good - your configure finished. Start make now"
  echo ""
fi
